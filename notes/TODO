# things discovered
- only .py as argv does not open . as expected and gives no message
- need to explain how to make external global functions available to execstr
- help table-of-contents

# pairing things

 popup window with enum of possibilities
- autodetect colexpr types
- `mean` aggregator should be float
- freeze individual column
/ select rows via python expr
- select to beginning/end of rows
- set window title to current sheet?  append progress % ?

# larger cleanups
/ make all generated column names be valid identifiers
/ .tsv should deal with tabs/newlines properly on ^S[ave]
- 'new sheet'
- add hook: extend sheet with new row (key command)
- sheet-specific option overrides
- help sheet organization

## colors
- colorizer func running should be more robust (exceptions should not abort all display)
- precedence should not be essential (default prec of e.g. 5)
- colorizer interface SUCKS.  too many things at once.  make separate colorizers for rows, cells, and separators
- color exceptions are expected (expections?)


# likely features for v1.0
/ 'describe' sheet provides stats for each column; values are cached until reload

## Bugs
- rows with CalcErrorStr should sort
- date_time in .zip should be @ date type


# features
- add implicit/hidden row number, to make all rows unique and to be able to sort by 'original' ordering
- split on character index/position
- remove 'invalid' values (replace with None/'')
- unclean data notices
- load larger-than-memory .tsv files
- make sqlite db editable
- ability to select rows based on literal value (including type; not just simple string regex)
- load filter (relatively easy support for larger-than-memory data sources)
- concatenate sheets: append by rows
- editline: Tab/S-Tab completion
   - more generic actions to "copy from sheet" and "paste into input line".
- non-string columns should be freq analyzed into continuous bins
- action to make a new sheet with unique keys as the new columns
- delete regex groups entirely
- melt, pivot should be inverses
- call 'file' on current file, show on status
- auto-sort ([key] columns in order)
- determine columns by max(len(r) for r in rows)


## requiring design
- copy this column to different sheet
- apply this layout to different sheet
- make 'q' less destructive (query on exit?)
   - pause before reloading over edited file
- select rows with invalid values
- collapse rows by column; other columns are aggregated.  collapse is a toggle.
- save option preferences to be autoloaded next time
- .py not auto-executed?
- able to scroll left/right on super-wide-column (wider than screen) textviewer
- 'P'inned sheets added with '.' and all saved with g^S, and asked on exit if modified

## user interface
- some key to map next key to jump to this sheet.  e.g. Y F8 sets F8 to come back here
- make A/B/C default names usable from the get go (make column.name), but don't save them
- vd *.json -> sheet listing files?


# applications
- working vdzulip client
  - start new topic
  - reply to existing topic
- other sql databases (probably separate impls instead of framework like blaze)
- sweet interface to git
- asteroid mining nanobots (spreadsheet game)
- shell commands (autoparse into columns)
   - exec process (like `top`), split output, autoreload
   - allow TextSheet contents as source
- pcap parser
- binary file parser (neat interface for e.g. reverse engineering protocols)

## plugins
- codebook as you go (document all sheets/columns)
  - add helpstr field to columns?
- open_/save_hdf5
- loader for OData (odata.org) interface with ODataPy
- .csvs: multiple .csv files in one, separated by extra newlines
- other .json tabular formats

### REAL TODO

## Advanced Dev Guide (visidata insides)
# 4. Reference Guide
- full API reference (can write visidata plugins/sources/apps without looking at core vd code)

# 5. video demos
- every step of demo, actions should report status

